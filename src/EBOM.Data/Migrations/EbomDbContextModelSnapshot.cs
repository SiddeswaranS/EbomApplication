// <auto-generated />
using System;
using EBOM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBOM.Data.Migrations
{
    [DbContext(typeof(EbomDbContext))]
    partial class EbomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EBOM.Core.Entities.Entity", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DataTypeID")
                        .HasColumnType("int");

                    b.Property<string>("EntityDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EntityDisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("EntityID");

                    b.HasIndex("DataTypeID");

                    b.HasIndex("EntityName")
                        .IsUnique();

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityDataRevision", b =>
                {
                    b.Property<int>("DataRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataRevisionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DataRevisionDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DataRevisionNumber")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TemplateRevisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("DataRevisionId");

                    b.HasIndex("EntityId");

                    b.HasIndex("TemplateRevisionId");

                    b.ToTable("EntityDataRevision", (string)null);
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityDataType", b =>
                {
                    b.Property<int>("DataTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataTypeID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DataTypeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DataTypeFormat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DataTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("DataTypeID");

                    b.HasIndex("DataTypeName")
                        .IsUnique();

                    b.ToTable("EntityDataType", (string)null);

                    b.HasData(
                        new
                        {
                            DataTypeID = 1,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8011),
                            CreatedBy = 1,
                            DataTypeDescription = "Text values",
                            DataTypeName = "String",
                            IsActive = true
                        },
                        new
                        {
                            DataTypeID = 2,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8018),
                            CreatedBy = 1,
                            DataTypeDescription = "Whole numbers",
                            DataTypeName = "Integer",
                            IsActive = true
                        },
                        new
                        {
                            DataTypeID = 3,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8019),
                            CreatedBy = 1,
                            DataTypeDescription = "Date and time values",
                            DataTypeName = "Date",
                            IsActive = true
                        },
                        new
                        {
                            DataTypeID = 4,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8020),
                            CreatedBy = 1,
                            DataTypeDescription = "True/False values",
                            DataTypeName = "Boolean",
                            IsActive = true
                        },
                        new
                        {
                            DataTypeID = 5,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8020),
                            CreatedBy = 1,
                            DataTypeDescription = "Range values (e.g., 10:100)",
                            DataTypeName = "Range",
                            IsActive = true
                        },
                        new
                        {
                            DataTypeID = 6,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8021),
                            CreatedBy = 1,
                            DataTypeDescription = "Range with step (e.g., 10:100:10)",
                            DataTypeName = "RangeSet",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityDependencyDefinition", b =>
                {
                    b.Property<int>("EntityDependencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityDependencyID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DependentEntityID")
                        .HasColumnType("int");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int>("EntityOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValueType")
                        .HasColumnType("bit");

                    b.Property<int>("TemplateRevisionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("EntityDependencyID");

                    b.HasIndex("DependentEntityID");

                    b.HasIndex("EntityID");

                    b.HasIndex("TemplateRevisionID");

                    b.ToTable("EntityDependencyDefinition", (string)null);
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityTemplateRevision", b =>
                {
                    b.Property<int>("TemplateRevisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateRevisionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateRevisionDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TemplateRevisionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TemplateRevisionID");

                    b.HasIndex("EntityID");

                    b.ToTable("EntityTemplateRevision", (string)null);
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityValue", b =>
                {
                    b.Property<int>("EntityValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityValueId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityObjValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("EntityObjValueHash")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(900)")
                        .HasComputedColumnSql("CAST(HASHBYTES('SHA2_256', EntityObjValue) AS VARBINARY(32))", true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("EntityValueId");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("IX_EntityValue_EntityId");

                    b.HasIndex("EntityObjValueHash")
                        .HasDatabaseName("IX_EntityValue_Hash");

                    b.ToTable("EntityValue", (string)null);
                });

            modelBuilder.Entity("EBOM.Core.Entities.MirrorEntity", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("MirrorEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.HasKey("EntityId", "MirrorEntityId");

                    b.HasIndex("MirrorEntityId");

                    b.ToTable("MirrorEntity", (string)null);
                });

            modelBuilder.Entity("EBOM.Core.Entities.UserMaster", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("UserMaster", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 39, 3, 763, DateTimeKind.Utc).AddTicks(8112),
                            CreatedBy = 1,
                            IsActive = true,
                            UserName = "System"
                        });
                });

            modelBuilder.Entity("EBOM.Core.Entities.Entity", b =>
                {
                    b.HasOne("EBOM.Core.Entities.EntityDataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityDataRevision", b =>
                {
                    b.HasOne("EBOM.Core.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EBOM.Core.Entities.EntityTemplateRevision", "TemplateRevision")
                        .WithMany("DataRevisions")
                        .HasForeignKey("TemplateRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("TemplateRevision");
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityDependencyDefinition", b =>
                {
                    b.HasOne("EBOM.Core.Entities.Entity", "DependentEntity")
                        .WithMany()
                        .HasForeignKey("DependentEntityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EBOM.Core.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EBOM.Core.Entities.EntityTemplateRevision", "TemplateRevision")
                        .WithMany("DependencyDefinitions")
                        .HasForeignKey("TemplateRevisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependentEntity");

                    b.Navigation("Entity");

                    b.Navigation("TemplateRevision");
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityTemplateRevision", b =>
                {
                    b.HasOne("EBOM.Core.Entities.Entity", "Entity")
                        .WithMany("TemplateRevisions")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityValue", b =>
                {
                    b.HasOne("EBOM.Core.Entities.Entity", "Entity")
                        .WithMany("EntityValues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("EBOM.Core.Entities.MirrorEntity", b =>
                {
                    b.HasOne("EBOM.Core.Entities.Entity", "Entity")
                        .WithMany("MirrorEntities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EBOM.Core.Entities.Entity", "MirrorEntityNavigation")
                        .WithMany("MirroredByEntities")
                        .HasForeignKey("MirrorEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("MirrorEntityNavigation");
                });

            modelBuilder.Entity("EBOM.Core.Entities.Entity", b =>
                {
                    b.Navigation("EntityValues");

                    b.Navigation("MirrorEntities");

                    b.Navigation("MirroredByEntities");

                    b.Navigation("TemplateRevisions");
                });

            modelBuilder.Entity("EBOM.Core.Entities.EntityTemplateRevision", b =>
                {
                    b.Navigation("DataRevisions");

                    b.Navigation("DependencyDefinitions");
                });
#pragma warning restore 612, 618
        }
    }
}
